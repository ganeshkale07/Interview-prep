how router = express.Router()
- Use of any npm 

------------------------
a JSON document containing information about 30 electronic devices like capacitor and resistor  with properties like physics concept on they work ,multiple uses in real-life applications , price , invented by  presented in array format:


I am trying learn git and I want to practice my git skills with you .I want you to ask me beginner to advanced questions about git commands. ask me specific questions about how certain task using git and I WILL write exact command used. please provide me all details required in the task , including the branch name, repo url, files names etc



-------------------
Gamma to create slide 
sildesGPT - to create slide in backend - it is using chatGpt
https://slidesgo.com/ ---> slidesgo - to template
https://unroll.me/ --> Unroll.me - to unsubsciobr from email
https://12ft.io/ --->  paywall remover
https://sci-hub.se/ ---> View any research papaer - copy reasearch papar name and paste it 
merlin chrome extention --> want to summarise a content piece
askyourpdf.com --> Chat with PDF
https://app.yoodli.ai/ --> interview preparation
https://formula.dog/ ---> Excel sheet formula and explanation in plain english --> U can use ChatGpt
https://www.signalhire.com --->  want to know Mobile Number and email address on linkedin

===========================
Mongo DB commands
use <DB_NAME> - create or navigate to DB
show dbs - to see all db
db - to see current db we r in
db.dropDatabase() - delete DB

-->Collection level
db.createCollection("<COLLECTION_NAME>") - create collection
db.<COLLECTION_NAME>.drop() - drop collection

db.<COLLECTION_NAME>.find() -->  find all documents
db.<COLLECTION_NAME>.findOne() --> single doc in collection
db.<COLLECTION_NAME>.find({<KEY1>:<VALUE1>,<KEY2> : <VALUE2>, .....}) --> with condition one and more condition
db.<COLLECTION_NAME>.findOneReplace({<KEY1>:<VALUE1>,<KEY2> : <VALUE2>, .....}, <replacement>) ---> it will replace everything except _id key value
db.<COLLECTION_NAME>.findOneDelete({<KEY1>:<VALUE1>,<KEY2> : <VALUE2>, .....})

db.<COLLECTION_NAME>.insertOne({<KEY>:<VALUE>})
db.<COLLECTION_NAME>.insertMany([ {<KEY>:<VALUE>} , {<KEY>:<VALUE>}])

db.<COLLECTION_NAME>.update( {}, {$set : {} ) -> it will update only one doc by default but if multi:true is given then will update all doc same like updateMany()
db.<COLLECTION_NAME>.updateOne({})
db.<COLLECTION_NAME>.updateMany({})

deleteOne({<KEY> : <VALUE>})
CAREFULL===> deleteMany({}) --> empty braces it will delete all documents :( 

-->operators for MORE REFINE RESULT


**-->Get specific key's of document like I want to see all documents city only not all other key's
find({condition....} , { <KEY_Name> : 1 , <KEY_NAME> : 0 })
--> 1 correspondes to see that key
--> 0 do not show these key


===============================
OOP
paradime - style - code karne ki style 
functional paradime

========================Rest api video
postman - rest api client - to test api we need frontend - frontend mhanje client - postman provide interface to interact


================
Angular interview questions
-Doc file github - codecraft website
-Coder gyan video (JS and OOP) - Array method, scalar topics
-How javascript executed engine part - harsh vashitsh

Extra
-PDF in email -->https://ultimatecourses.com/blog/category/angular/7/
-Scalar Topics ( common js , ejs , multi threading , streamings )
-medium
-ngRx
 
To Know
-what is new in Angular new version
-All new things - version , features
-authentication and authorization
-Typescript - ultimate course and proj refer

javascript interview question
- Arc tutorials
- codecraft 

Node js , express , MongoDB 
-Arc tutorials

==============================

regular functions the this keyword represented the object that called the function
arrow functions the this keyword always represents the object that "defined" the arrow function

Javascript is single threaded
-JavaScript is a single-threaded programming language, meaning that it executes one operation at a time in a single sequence. This means that JavaScript code is processed sequentially, and each operation must complete before the next one can start.

In a single-threaded environment, if a particular operation takes a long time to complete, it can block the execution of subsequent operations. For example, if a JavaScript function performs a lengthy computation or a blocking I/O operation, it will prevent other code from executing until it finishes.

However, it's important to note that JavaScript also has features that allow for asynchronous programming, enabling non-blocking behavior. This is achieved through mechanisms like callbacks, promises, and async/await. Asynchronous operations in JavaScript leverage event-driven programming and the browser's event loop to handle tasks concurrently without blocking the main thread.

By using asynchronous programming techniques, JavaScript can initiate tasks and continue executing other code while waiting for those tasks to complete. This allows for more efficient handling of I/O operations, such as making HTTP requests or reading files, without blocking the execution of the rest of the code.

So, while JavaScript is single-threaded by default, it provides mechanisms for asynchronous programming to handle concurrent tasks efficiently and avoid blocking operations.

-While JavaScript itself runs in a single thread, the browser or runtime environment may have additional threads for handling tasks like rendering, networking, or running Web Workers. These additional threads allow certain operations to be performed concurrently, but the JavaScript code execution itself remains single-threaded.

--->Learnings from SQL
DBMS - A software application used to manage (CRUD) our DB
User --- SQL ----> DBMS -- DB
With SQL we tell DBMS to do something and DBMS make changes to DB side

constraints - Rules
clauses - condition

IN ( cond_1 , cond_2, cond_3) - to check multiple condition we use it

cascading - If something change at one place it should also change at some other plcae as well at same time

scehma - Means strcuture , dhacha , design 
Ex: column_name datatype constraints

ALTHER - commands are used to change scehma

-----------------------------------
What are SOLID principle

1. Single Responsibility Principle (SRP):
If the chef also handles the restaurant's finances and customer service, it violates the SRP

2.Open-Closed Principle (OCP):
Principle: Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.
(Implement interfaces and use those evertime making changes in original class code )  

3. Liskov Substitution Principle (LSP):
Simplified Principle: If you have a group of related things (like animals in a zoo), you should be able to replace any thing with another thing from that group without causing problems. (should have generalised class for same type of object like animal)

4. Interface Segregation Principle (ISP):
Simplified Principle: Don't force someone to use things they don't need

5. Dependency Inversion Principle (DIP):
Simplified Principle: High-level parts of your program (like the main features) shouldn't depend on low-level details (like specific classes). Both should rely on a common understanding (abstraction).



