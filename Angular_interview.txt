f-decorators
They are just functions that can be used to add meta-data, properties or functions to the thing they are attached to
	
--what is enum
--The command runs the application through a web-server that support HTML5 push-state routing.

BOOTSTRAP
to boot or to load a program into a computer using a much smaller initial program to load in the desired program
To "bootstrap" an Angular application means to initialize and start the execution of the application

-module concepts
In JavaScript the term module generally refers to code which exists in a single file. An NgModule is a different concept, it combines code from different files together into one package.

NOTE - By setting the selector to joke weâ€™ve told angular that whenever it finds a tag in the HTML like <joke></joke> to use an instance of the JokeComponent class to control it.

pathlocation strategy and hashlocation strategy


MVC architecture
The component class contains the business logic, data manipulation methods, and interacts with services or APIs to retrieve or update the data. It communicates with the view by using Angular's data binding and event handling mechanisms, allowing the view to reflect the changes in the model and respond to user actions.

-what is design pattern

-constructor VS ngOnInit
Unlike the constructor, ngOnInit is called after Angular has initialized the component's input properties and injected dependencies, and after the DOM is available for manipulation. This makes it a safer place to perform more complex initialization tasks.

========Git configuring
  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

=======Typescript Notes
!
The ! operator asserts that a value will not be null or undefined
as it essentially tells TypeScript to trust you
If you're wrong and the value is actually null or undefined, it will result in a runtime error.

?
The ? operator is used when defining properties in TypeScript interfaces or types to indicate that a property is optional, meaning it may or may not be present in an object of that type.

Signature in Typescript
Signatures are an essential part of TypeScript's type system and play a crucial role in defining the shape of functions and methods that can be used in your code.

Interfaces are contract
They specify the shape of object

interfaces duck typing

Classes
class Car {
    constructor(public model:string ,public year:number){

    }
	
    static color = red;
}

let xuv = new Car("300",1990);

console.log(xuv.model);

-accessor function means  getter and setters 
-static properties only accessible on class itself like --> Car.color
-Access Modifiers - public , private , protected 
	private - strictly accessible inside the class "only" not in sub-class
 	protected - available inside 'main' and 'sub classes' not in instance of classes
-Inheritance means use of extends keyword
-implements means to have contract in between

-->
Abstract classes
Created with abstract keyword
base classes may not be instantiated only sub classes created from it can be instantiated
may contain implementation details 
If u add abstract method in base class other subclass has to implement it first

--->
Generics
Code that works with multiple types
--In a general sense, the term "constraint" refers to a limitation, restriction, or condition that is imposed on something

TypseScript Generics understanding

1. thing worked

interface Lengthwise {
  length: number;
}

function loggingIdentity<Type extends Lengthwise>(arg: Type): Type {
  console.log(arg.length); // Now we know it has a .length property, so no more error
  return arg;
}

loggingIdentity(["Hanesh","pooo",99]);

--> ["Hanesh","pooo",99] these whole treated as TYPE which has length property - so worked

2. Thing won't work

interface Lengthwise {
  length: number;
}

function loggingIdentity<Type extends Lengthwise>(arg: Array<Type>): Type[] {
  console.log(arg.length); // Now we know it has a .length property, so no more error
  return arg;
}

loggingIdentity(["Hanesh","pooo",99]);

--> ["Hanesh","pooo",99] individual treated as TYPE out of which 99 number don't have it - failed

=========Ngrx
Effects 
Basically to handle async things they are used
Take an action - do some work (like calling a service )- Return new action

What is NgRx
It's often referred to as the state management library for Angular. 
based on Redux pattern
NgRx is built on top of RxJS, which is a library for reactive programming using Observables.

Web API
Web API typically refers to a set of rules and conventions for building and interacting with web services,
which are endpoints on a web server that allow communication between different applications over the internet.
It allows different software applications, often on different servers, to interact with each other.

When to Use
notify everyone
getting data unchanged data again and again
there is state everywhere

When changes thing trigger in onChangeDetectionStrategy
The component receives an input.
An event handler is triggered from the component or one of its children.
The component or one of its children fires an HTTP request.
An observable subscribed to by the component emits an event.
ex:
@Component({
  selector: 'app-example',
  templateUrl: 'example.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})

